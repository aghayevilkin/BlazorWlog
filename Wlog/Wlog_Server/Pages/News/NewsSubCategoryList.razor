@page "/newssubcategory"
@inject INewsSubCategoryRepository NewsSubCategoryRepository
@inject INewsCategoryRepository NewsCategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = SD.Role_Admin)]



<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Sub Category</h4>
        <NavLink href="news" class="btn btn-info">News</NavLink>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="newssubcategory/create" class="btn btn-info form-control">Add New</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>News Category</th>
                    <th>NewsSub Category</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (NewsSubCategories.Any())
                {
                    foreach (var item in NewsSubCategories)
                    {
                        @foreach (var item2 in NewsCategoryDTOs.Where(x => x.Id == item.NewsCategoryId))
                        {
                            <tr>
                                <td>@item2.Name</td>
                                <td>@item.Name</td>
                                <td>
                                    <NavLink href="@($"newssubcategory/edit/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                                    <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>



@code {
    private IEnumerable<NewsSubCategoryDTO> NewsSubCategories { get; set; } = new List<NewsSubCategoryDTO>();
    private IEnumerable<NewsCategoryDTO> NewsCategoryDTOs { get; set; } = new List<NewsCategoryDTO>();
    private int? DeleteCategoryId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        NewsSubCategories = await NewsSubCategoryRepository.GetAllNewsSubCategory();
        NewsCategoryDTOs = await NewsCategoryRepository.GetAllNewsCategory();
    }


    private async Task HandleDelete(int categoryId)
    {
        DeleteCategoryId = categoryId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }


    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;

        if (isConfirmed && DeleteCategoryId != null)
        {
            NewsSubCategoryDTO newsSubCategory = await NewsSubCategoryRepository.GetNewsSubCategory(DeleteCategoryId.Value);

            await NewsSubCategoryRepository.DeleteNewsSubCategory(DeleteCategoryId.Value);
            await JsRuntime.ToastrSuccess("Category Deleted successfully");
            NewsSubCategories = await NewsSubCategoryRepository.GetAllNewsSubCategory();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");

        IsProcessing = false;
    }
}
