@page "/news"
@inject INewsRepository NewsRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
@inject AppDbContext _db
@attribute [Authorize(Roles = SD.Role_Admin)]

<div class="row mt-4">
    <div class="col-8 mb-4">
        <NavLink href="newscategory" class="btn btn-info">Category</NavLink>
        <NavLink href="newssubcategory" class="btn btn-info">Sub Category</NavLink>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="news/create" class="btn btn-info form-control">Add New</NavLink>
    </div>
</div>

<MudTable Items="@NewsModels" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<NewsDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">News</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Image</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>SubCategory</MudTh>
        <MudTh>Details</MudTh>
        <MudTh>#</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>

        <MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="@arrows" ShowBullets="@bullets" AutoCycle="@autocycle" TData="object">

            @foreach (var item in context.NewsImages)
            {
                <MudCarouselItem Transition="transition" Color="@Color.Primary">
                    <div class="d-flex" style="height:100%;">
                        <img class="mx-auto my-auto" style="width:100%;" src="@item.NewsImageUrl" alt="slide">
                    </div>
                </MudCarouselItem>
            }

        </MudCarousel>



        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Name">@context.Category.NewsCategory.Name</MudTd>
        <MudTd DataLabel="Category">@context.Category.Name</MudTd>
        <MudTd DataLabel="Details">
            <button class="btn btn-success" @onclick="()=>ShowDetails(context.Id)">Details</button>
        </MudTd>
        <MudTd DataLabel="#">
            <NavLink href="@($"news/edit/{context.Id}")" class="btn btn-primary">Edit</NavLink>
            <button class="btn btn-danger" @onclick="()=>HandleDelete(context.Id)">Delete</button>
        </MudTd>
        
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>
<CascadingValue Value="newsDetail" Name="newsDetail">
    <NewsDetails IsParentComponentProcessing="IsProcessing" ConfirmationChanged="NewsDetails_Click"></NewsDetails>
</CascadingValue>


@code {

    public string newsDetail { get; set; }


    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private NewsDTO selectedItem1 = null;
    private HashSet<NewsDTO> selectedItems = new HashSet<NewsDTO>();


    //Carousel------------------------------------------
    private bool arrows = true;
    private bool bullets = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;

    //---------------------------------------------------

    private IEnumerable<NewsDTO> NewsModels { get; set; } = new List<NewsDTO>();
    private int? DeleteNewsId { get; set; } = null;
    private int? ShowNewsId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        NewsModels = await NewsRepository.GetAllNews();
    }



    private bool FilterFunc1(NewsDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(NewsDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Category.NewsCategory.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }













    private async Task HandleDelete(int newsId)
    {
        DeleteNewsId = newsId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ShowDetails(int newsId)
    {
        DeleteNewsId = newsId;
        var details = _db.News.FindAsync(newsId).Result;
        newsDetail = details.Details;
        await JsRuntime.InvokeVoidAsync("ShowNewsDetailsModal");
    }


    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;

        if (isConfirmed && DeleteNewsId != null)
        {
            NewsDTO news = await NewsRepository.GetNews(DeleteNewsId.Value);
            foreach (var image in news.NewsImages)
            {
                var imageName = image.NewsImageUrl.Replace($"{NavigationManager.BaseUri}WlogImages/", "");
                FileUpload.DeleteFile(imageName);
            }

            await NewsRepository.DeleteNews(DeleteNewsId.Value);
            await JsRuntime.ToastrSuccess("News Deleted successfully");
            NewsModels = await NewsRepository.GetAllNews();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");

        IsProcessing = false;
    }


    public async Task NewsDetails_Click(bool isConfirmed)
    {
        IsProcessing = true;

        if (isConfirmed && DeleteNewsId != null)
        {
            NewsModels = await NewsRepository.GetAllNews();
        }
        await JsRuntime.InvokeVoidAsync("HideNewsDetailsModal");

        IsProcessing = false;
    }

}
