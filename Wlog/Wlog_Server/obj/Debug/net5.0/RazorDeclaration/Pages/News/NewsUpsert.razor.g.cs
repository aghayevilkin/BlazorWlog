// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Wlog_Server.Pages.News
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Wlog_Server;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Wlog_Server.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using DataAccess.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Business;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Business.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Business.Repository.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Blazored.TextEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Wlog_Server.Helper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Wlog_Server.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Wlog_Server.Service.IService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/news/create")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/news/edit/{Id:int}")]
    public partial class NewsUpsert : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 114 "C:\Users\ASUS\source\repos\Wlog\Wlog_Server\Pages\News\NewsUpsert.razor"
       

    [Parameter]
    public int? Id { get; set; }
    private NewsDTO NewsModel { get; set; } = new NewsDTO();
    private string Title { get; set; } = "Create";
    private NewsImageDTO NewsImage { get; set; } = new NewsImageDTO();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    private IEnumerable<NewsSubCategoryDTO> NewsSubCategoryDTOs { get; set; } = new List<NewsSubCategoryDTO>();
    private IEnumerable<NewsCategoryDTO> NewsCategoryDTOs { get; set; } = new List<NewsCategoryDTO>();
    private IEnumerable<NewsDTO> NewsModels { get; set; } = new List<NewsDTO>();

    private bool IsImageUploadProcessStarted { get; set; } = false;










    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {

        NewsSubCategoryDTOs = await NewsSubCategoryRepository.GetAllNewsSubCategory();
        NewsCategoryDTOs = await NewsCategoryRepository.GetAllNewsCategory();
        NewsModels = await NewsRepository.GetAllNews();


        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            //Updating
            Title = "Update";
            NewsModel = await NewsRepository.GetNews(Id.Value);

            if (NewsModel?.NewsImages != null)
            {
                NewsModel.ImageUrls = NewsModel.NewsImages.Select(u => u.NewsImageUrl).ToList();
            }


        }
        else
        {
            //Create
            NewsModel = new NewsDTO
            {
                CategoryId = _db.NewsSubCategories.FirstOrDefault().Id
            };

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(NewsModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(NewsModel.Details);
                }
                loading = false;
            }
            catch (Exception)
            {
                await Task.Delay(10);
                loading = true;
            }

        }

    }


    private async Task HandleNewsUpsert()
    {

        try
        {
            //var newsDetailsByName = await NewsRepository.IsNewsUnique(NewsModel.Title, NewsModel.Id);
            //if (newsDetailsByName != null)
            //{
            //    await JsRuntime.ToastrError("News name already exists.");
            //    return;
            //}

            if (NewsModel.Id != 0 && Title == "Update")
            {
                NewsModel.Details = await QuillHtml.GetHTML();
                //Update
                var updateNewsResult = await NewsRepository.UpdateNews(NewsModel.Id, NewsModel);
                if ((NewsModel.ImageUrls != null && NewsModel.ImageUrls.Any())
                    || (DeletedImageNames != null && DeletedImageNames.Any())
                    )
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{NavigationManager.BaseUri}WlogImages/", "");

                            var result = FileUpload.DeleteFile(imageName);
                            await NewsImagesRepository.DeleteNewsImageByUrl(deletedImageName);
                        }
                    }



                    await AddNewsImage(updateNewsResult);
                }
                await JsRuntime.ToastrSuccess("News updated successfully.");
            }
            else
            {

                //Create
                NewsModel.Details = await QuillHtml.GetHTML();


                var createdResult = await NewsRepository.CreateNews(NewsModel);
                await AddNewsImage(createdResult);
                await JsRuntime.ToastrSuccess("News created successfully.");
            }
        }
        catch (Exception ex)
        {
            //log exceptions
            throw;
        }



        NavigationManager.NavigateTo("news");
    }

    public void SetHtml()
    {
        if (!string.IsNullOrEmpty(NewsModel.Details))
        {
            this.QuillHtml.LoadHTMLContent(NewsModel.Details);
        }

        StateHasChanged();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;

        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/ .jpeg/ .png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (NewsModel.ImageUrls != null && NewsModel.ImageUrls.Any())
                    {
                        NewsModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        NewsModel.ImageUrls = new List<string>();
                        NewsModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image uploading failed");
                    return;
                }

            }


            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
        }

    }


    private async Task AddNewsImage(NewsDTO newsDetails)
    {
        foreach (var imageUrl in NewsModel.ImageUrls)
        {
            if (NewsModel.NewsImages == null || NewsModel.NewsImages.Where(x => x.NewsImageUrl == imageUrl).Count() == 0)
            {
                NewsImage = new NewsImageDTO()
                {
                    NewsId = newsDetails.Id,
                    NewsImageUrl = imageUrl,
                };
                await NewsImagesRepository.CreateNewsImage(NewsImage);
            }

        }
    }


    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = NewsModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}WlogImages/", "");
            if (NewsModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //Update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }

            NewsModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppDbContext _db { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileUpload FileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INewsImagesRepository NewsImagesRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INewsSubCategoryRepository NewsSubCategoryRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INewsCategoryRepository NewsCategoryRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INewsRepository NewsRepository { get; set; }
    }
}
#pragma warning restore 1591
