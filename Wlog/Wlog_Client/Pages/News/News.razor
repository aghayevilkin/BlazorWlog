@page "/news"
@page "/news/category/{id:int}"
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject INewsCategoryService newsCategoryService
@inject INewsService newsService
<!-- News With Sidebar Start -->
<div class="container-fluid mt-5 pt-3">
    <div class="container">
        <div class="row">
            <div class="col-lg-8">
                <div class="row">
                    <div class="col-12">
                        <div class="section-title">
                            <h4 class="m-0 text-uppercase font-weight-bold">Category: @NewsCategoryModel.Name</h4>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            @*<a class="text-secondary font-weight-medium text-decoration-none" href="">View All</a>*@
                        </div>
                    </div>



                    <MudTable Items="@NewsModel.Where(x=>x.Category.NewsCategory.Id == NewsCategoryModel.Id)" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"  Filter="new Func<NewsDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">

                        <RowTemplate>

                            <div class="col-lg-12">
                                <div class="position-relative mb-3">
                                    @foreach (var img in context.NewsImages.Take(1))
                                    {
                                        <img class="img-fluid w-100" src="@img.NewsImageUrl" style="object-fit: cover;" alt="">
                                    }
                                    <div class="bg-white border border-top-0 p-4">
                                        <div class="mb-2">
                                            <a class="badge badge-primary text-uppercase font-weight-semi-bold p-2 mr-2"
                                               href="@($"news/details/{context.Id}")">@context.Category.NewsCategory.Name </a>
                                            <a class="text-body" href=""><small>Jan 01, 2045</small></a>
                                        </div>
                                        <a class="h4 d-block mb-3 text-secondary text-uppercase font-weight-bold" href="@($"news/details/{context.Id}")">@context.Title</a>
                                        <p class="m-0">
                                            @((MarkupString)(context.Details != null && context.Details.Length > 150 ? context.Details.Substring(0, 250) + "..." : context.Details))
                                        </p>
                                    </div>
                                    <div class="d-flex justify-content-between bg-white border border-top-0 p-4">
                                        <div class="d-flex align-items-center">
                                            @if (context.User.Images != null)
                                            {
                                                <img class="rounded-circle mr-2" src="@context.User.Images" width="25" height="25" alt="">
                                            }
                                            else
                                            {
                                                <img class="rounded-circle mr-2" src="img/avatar.png" width="25" height="25" alt="">
                                            }

                                            <small>@context.User.Name @context.User.Surname</small>
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <small class="ml-3"><i class="far fa-eye mr-2"></i>@context.ViewCount</small>
                                            <small class="ml-3"><i class="far fa-comment mr-2"></i>123</small>
                                        </div>
                                    </div>
                                </div>
                            </div>


                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager HideRowsPerPage="hideRowsPerPage" />
                        </PagerContent>
                    </MudTable>


                </div>
                @*<Pagination TotalPagesQuantity="NewsPagingModel.Pagination.TotalPages" CurrentPage="NewsPagingModel.Pagination.CurrentPage" Radius="4" SelectedPage="SelectedPage"></Pagination>*@
            </div>

            <NewsRightSide />

        </div>
    </div>
</div>
<!-- News With Sidebar End -->


@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Url { get; set; }

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private bool hideRowsPerPage = true;
    private string searchString1 = "";
    private NewsDTO selectedItem1 = null;
    private HashSet<NewsDTO> selectedItems = new HashSet<NewsDTO>();

    public NewsCategoryDTO NewsCategoryModel { get; set; } = new NewsCategoryDTO();

    public IEnumerable<NewsDTO> NewsModel { get; set; } = new List<NewsDTO>();


    public bool IsProcessing { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {


        navigationManager.LocationChanged += (o, e) =>
        {
            Url = navigationManager.Uri;
            navigationManager.NavigateTo(Url, true);
        };

        NewsCategoryModel = await newsCategoryService.GetCategory(Id);

        IsProcessing = true;
        NewsModel = await newsService.GetNews();
        IsProcessing = false;
    }



    private bool FilterFunc1(NewsDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(NewsDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Category.NewsCategory.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

}
