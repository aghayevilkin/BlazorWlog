@page "/account/edit"
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject IAccountService accountService


<div class="container">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="UserDetails" OnValidSubmit="HandleUserEdit">
                    <DataAnnotationsValidator />
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <h6 class="mb-0">Şəkil</h6>
                        </div>
                        <div class="col-sm-9 text-secondary">
                            @if (UserDetails.Images != null)
                            {
                                <img src="@UserDetails.Images" style="width: 250px; height: 250px;"> <br /> <br />
                            }
                            else
                            {
                                <img src="img/no-photo.jpg" style="width: 250px; height: 250px;"> <br /> <br />
                            }

                            <InputFile OnChange="@OnInputFileChanged"></InputFile>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <h6 class="mb-0">Ad</h6>
                        </div>
                        <div class="col-sm-9 text-secondary">
                            <InputText @bind-Value="UserDetails.Name" type="text" class="form-control" placeholder="Ad..." />
                            <ValidationMessage For="(()=>UserDetails.Name)" style="margin-top: 0.5rem;" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <h6 class="mb-0">Soyad</h6>
                        </div>
                        <div class="col-sm-9 text-secondary">
                            <InputText @bind-Value="UserDetails.Surname" type="text" class="form-control" placeholder="Soyad..." />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <h6 class="mb-0">Peşə</h6>
                        </div>
                        <div class="col-sm-9 text-secondary">
                            <InputText @bind-Value="UserDetails.Profision" type="text" class="form-control" placeholder="Peşə..." />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <h6 class="mb-0">Ünvan</h6>
                        </div>
                        <div class="col-sm-9 text-secondary">
                            <InputText @bind-Value="UserDetails.Adress" type="text" class="form-control" placeholder="Ünvan..." />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-3">
                            <h6 class="mb-0">Haqqında</h6>
                        </div>
                        <div class="col-sm-9 text-secondary">
                            <InputText @bind-Value="UserDetails.About" type="text" class="form-control" placeholder="Haqqında..." />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-3"></div>
                        <div class="col-sm-9 text-secondary">
                            <button type="submit" class="btn btn-primary px-4">Yadda saxla</button>
                        </div>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>


@code {

    public bool IsProcessing { get; set; } = false;

    public UserDTO UserDetails { get; set; } = new UserDTO();

    protected override async Task OnInitializedAsync()
    {
        var userInfo = await localStorage.GetItemAsync<UserDTO>
                (SD.Local_UserDetails);

        IsProcessing = true;
        UserDetails = await accountService.USerDetails(userInfo.Id);
        IsProcessing = false;
    }


    private async Task HandleUserEdit()
    {
        await accountService.UpdateUser(UserDetails);

        await localStorage.SetItemAsync(SD.Local_UserDetails, UserDetails);

        await jsRuntime.ToastrSuccess("Updated");

        navigationManager.NavigateTo("account", true);

    }



    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //get the file
        var file = inputFileChangeEvent.File;

        //read that file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        //convert byte array to base 64 string
        UserDetails.Images = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }


}
